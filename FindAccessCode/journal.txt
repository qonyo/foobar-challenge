usually in a competitive programming there will be a problem about dynamic programming

will this be the one?

too tired to copas the problem and make whole workspace, but basically it's about finding 
lucky triplet [x,y,z] where

y%x = 0
z%y = 0

right now I'm thinking of 2 approach

1. brute forcing by iterating and checking
2. using modulo inspired by sieve of eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) <= not really sure about this one, but I felt like it might help efficiency

I don't really know how to find any cool mathematic tricks or even dynamic programming
I will try to at least be able to run correctly

observation :
1. list's members are not always unique (there will be a repeating member)
2. list's members are not always in order (see point 1), but let's assume we don't need any list ordering
3. list need at least 3 members, let's assume no problem have less than 3 members
4. it's unknown if there will be huge "jump" in problem for "hacking" purposes, assume there will

What I mean :
[1,2,3,4,5,6]
     ^
in this scenario once looking first triplet member on 4, we can skip since it's impossible reducing 
iteration by half (stop at 3)

example that breaks this hacks:
[1,2,3,4,5,15]
         ^
can't stop at 3
				 
I ran manual calculation in paper, this journal might be incomplete since it's easier to write in 
pen and paper in a fluid form, sorry for any reader

proposed alghoritm (it's assuming observation 2 assumption is true, break if problem not in order)
1. make a list that holds "divisible" with len of n where all value is 0
2. make triplet_count that holds triplet count start with 0
2. start itering problem domain, item pointed in this iteration we will call divisor
3. start itering problem domain, starting with the next item in after divisor's position, we will call dividend
4. if dividend%divisor == 0, 
5. iter divisible_by, each divisible div(C)2 (combination take 2)
6. result of step 5 always added to triplet_count
7. return

^wrong, there is repetition in counting triplet process, I'm sure this solution broke when there is jumping sequence, 
or maybe because of order? one thing at a time, let's say it's because of order first

no it's not

I think the problem is when there are a lot of jumps, I think repetitive member can be problem too i. e.

[1,2,2,4] = 2

(1,2,4)
(1,2,4)

my current solution can deal with this, but not in some other cases, it might be time limit, or the algorithm is wrong (in my approximation this algo might fail on jumping sequences)
writing this also make another solution in my mind goes moot which is making a bin for all triplet and set(triplet) it discarding repetitive triplet

the problem is (1,2,4) (1,2,4) is valid, if there is repetitive number too in this case it's 2

so we can say that appearance frequency holds an importance to solving this problem

I also noticed that most of the time there is a lot of repeating "divisor", will thinking about it reveal more pattern?
example
[2,3,4,5,6,7,8,9,10,11,12]
(2,4,8) < 2,4
(2,4,12)< 2,4
(2,3,6)  <2,3
(2,3,12) <2,3
(3,6,12)
(2,5,10)

let's try breaking it down more
(2,4,8) < 2,4 || (2,4) (4,8)
(2,4,12)< 2,4 || (2,4) (4,8)
(2,3,6)  <2,3 || (2,3) (3,6)
(3,6,12) (3)

2 and 3 really comes in a lot which is in sync with sieve of eratosthenes, I don't yet find any use for it in this problem though. I need to keep it in it might have clues

I'm kind of sleep deprivated right now haha

it feels as if there is some kind of gateway, or linking in this problem, do I need to graph this problem? represent this problem as tree? I don't really think so, 
the test cases (with one in population) is really polluting my thought process right now
my brain looking for easy pattern too much, but the gateway thing is still on the board though, graph and tree feels too out there

my suspicion on some kind of linking / gateway problem is confirmed, I found a solution that include combination of 2 images and mention gateway, in it, I only read it very briefly not to clue myself too much

I will hack at it with this clue in mind later

============================================================================================================

I have a would be solution which is :

1. count all member occurence
2. make division chain i. e. 
chains:
(1,2,4,8) : triplets => (1,2,4) (1,4,8) (1,2,4) C(C1)3
(1,2,6) : triplets 1

then check if there are more than one occurence in any of the triplets (1,2,2,4)

wait wait hold up, did I misread the test cases? 
111 counted as 1 not three, meaning that occurences is not counted? as long as it's a chain? or is it series sensitive?
but it will be a problem for (1,1,1) if use set first

I'm getting close to answer

I can brute force it 

if len set(list) < 3  or len(list) < 3:
	return 0
	
I really hate how beautiful the given testcases is

what happens if [1,2,1,1]
is it 1,2,1 and 111 only? I think so yeah, so I guess using set on triplets is available

can we use C(list)3 then set then check if a member is lucky triples?

it will explode too much though like
1,2,1,1

121 111 121 211

^wrong
1,1,2 is still available, 1 became gateway number I'm guessing what isn't needed is the duplicate pattern, not member occurences
noted : 1,1,2,1 the amount of 1 is important, but not the location so (index,value) ((0,1), (1,2), (2,1))  = ((0,1),(1,2),(3,1)) (because on 111 case 111 counted once)

I think I will need to graph this problem and try hacking at it one at a time

The length of l is between 2 (I guess we can agree if l is less than or equal 2 return 0)
======================================After graph solution====================================================

After drawing the problem we can see that gateway is important seen in the node graph relation (x,y)
where y%x == 0 

case 1,2,4,8
(1,2)(1,4)(1,8)
(2,4)(2,8)
(4,8)

draw nodes and maps by yourself, it's very illustrative of the problem in example triplet 1,2,4 1,2,8 will show you that it adds 2 triplet

with the following relation num_div * num_mul (unique, divided by 2 only counted once no matter how many occurences of 2 in the membership) in case of gateway 2 1*2 = 8 so in summary

n div mul
1  0   3
2  1   2
4  2   1
8  3   0

where lucky triplets count are 0*3 + 1*2 + 2*1 + 3*0 = 4 (at first I thought it was 1*2*2*1 where only gateway included, next case proves me wrong and gave me the sum/ zigma instead of selective multiplying)

this solution broke down when we introduce reoccurence

case 1,1,2,4,8

relations:
(1,1) (1,2) (1,4) (1,8)
(2,4) (2,8)
(4,8)

n div mul
1  1   4
2  1   2
4  2   1
8  3   0

manual count shows
112
114
118
124
128
148
248

trips = 7

lucky trips = (1*4 + 1*2 + 2*1 + 3*0) = 8

this is because in n = 1 1*4 assumes that 1 is available on the right side of the graph (both divisor and multiplier)
this is easily solved with having flag that say hey if occurences is equal 2 please substract 1 from this multiplication!
occurences of character more than 3 is not important because 3,3,3,3 will only have (3,3,3) as lucky trips

final case 
1,1,2,2,2,2,4,5,6,8

(1,1)(1,2)(1,4)(1,5)(1,6)(1,8)
(2,2)(2,4)(2,6)(2,8)
(4,8)


manual = 15
112
114
115
116
118
122
124
126
128
148
222
224
226
228
248

n div mul occ
1  1   6   2
2  2   4   4
4  2   1   1
5  1	 0	 1
6	 2   0   1
8  3   0   1

(1*6) - 1 + (2*4) + (2*1) = 15 	YESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

proposed algorithm:
1. make unique combination take 2 from all lists member
2. find all member occurences
3. find out div and mul count
4. zigma div*mul if occ !=2 else (div*mul)-1


something wrong with my solution
I assume it might be this kind of case

2,2,4,4,8

(2,2)(2,4)(2,8)
(4,4)(4,8)

224
228
244
248
448
nope worked correctly
whoops

8,2,4,2,4

this case failed, I think I need to sort my list first

still failed found failed case

1,2,3,4,4,5,6,7,10,11,11,12,14,15,15

(1,2) (1,3) (1,4) (1,5) (1,6) (1,7) (1,10) (1,11) (1,12) (1,14) (1,15)
(2,4) (2,6) (2,10) (2,12) (2,14)
(3,6) (3,12) (3,15)
(4,4)(4,12)
(5,10) (5,15)
(6,12)
(7,14)
(11,11)
(15,15)

124 	
126 
1210
1212
1214
136
1312
1315
144
1412
1510
1515
1612
1714
11111
11515
244
2412
2612
3612
31515
4412
51515

								double occurences not counted
n div mul occ	|	div	mul
1  0   11  1	|	 0	 11	 V assumption using current algorithm
2  1   5   1	|	 1	 5	 5 all found
3  1   3   1	|	 1   3	 3 all found
4  3   2   2	|	 2   1	 5 all found
5  1   2   1	|	 1   2	 2 all found
6  3   1   1	|	 3   1
7  1   1   1	|	 1   1
10 3   0   1	|	 3   0
11 2   1   2	|	 1   0
12 5   0   1	|	 5   0
14 3   0   1	|	 3   0
15 4   1   2	|	 3   0

curr :  0 + 5 + 3 + 5 + 2 + 3 + 1 + 0 + 1 + 0 + 0 + 3 =23 | dev 2
no_rep : 0 + 5 + 3 + 2 + 2 + 3 + 1 + 0 + 0 + 0 + 0 + 0 = 16 | dev 9

when one 15 is deleted, what is gone from the sequence 
is all of the double 15 totalled 3
so does 11 missing would be 1
and 4 miss 3

I need to hunt down these 2 case

total 23 if we count the double miss but we are still missin 2 cases

method found 23 correct 25, I think my calculation of number 3 and 4 is the cause

SKIP turns out I did it correctly what the hell?

4, 5, 2, 8, 5, 9, 2, 2, 7, 1

I think this one fails

1,2,2,2,4,5,5,7,8,9
(1,2)(1,4)(1,5)(1,7)(1,8)(1,9)
(2,2)(2,4)(2,8)
(4,8)

122 124 128
148
222 224 228
248

total = 8, ans_pipe = 9 ( seems like there is something wrong when 3 occ happens)

n div mul occ
1  0   6   1
2  2   3   3
4  2   3   1
5  1   0   2 < wrong -1 result
7  1   0   1
8  3   0   1
9  1   0   1

1,2,2,4,5,5,7,8,9
(1,2)(1,4)(1,5)(1,7)(1,8)(1,9)
(2,2)(2,4)(2,8)
(4,8)

122 124 128
148
224 228
248

total = 8, ans_pipe = 9 ( seems like there is something wrong when 3 occ happens)

n div mul occ
1  0   6   1
2  2   3   2
4  2   3   1
5  1   0   2
7  1   0   0
8  3   0   0
9  1   0   0

total = 7, ans pipe = 8

my formula is wrong from the start it seems
but from problem before that I broke down :
1,2,3,4,4,5,6,7,10,11,11,12,14,15,15

I found that if we exclude (1,1) and or reocurrence, the num of triples when occurence == 2 is
div_gateway + mul_gateway

if  > 3 tot + 1


it doesn't make sense, it's still wrong
I don't find test cases that fails
this is weird

I gave up and saw a solution online that DOESN'T MAKE SENSE LITERALLY
I even tested it with my current pipeline and the result is night and day

for LOL I tried using the solution to verify the google foobar problem and with such nonsense solution it must... it passed...

IT PASSED WHAT?

okay so because I say I failed this one let's try to break this solution down and see what is different

or maybe, what is this google problem about

case [1,2,2,2,3,3,3,4,4,4,5,5,6]

my pipe = 14
ans = 52

I have a feeling that the answer that google is looking for is that 1,2,4 in this case is counted multiple time

so 1,2,4 there is 9 combination
1,2,6 there is 3 combination
1,3,6 there is 3 combination
1,2,2 there is 3 combination
1,3,3 there is 3 combination
1,4,4 3 combination
1,5,5 1 combination
2,2,4 9
3,3,6 3
3,3,3 1
2,2,2 1
4,4,4 1

wow it's not even close to 52... I don't know anymore I will skip this solution and revisit later, my goal playing this game is to learn not to be frustrated on a problem I don't understand yet, let's move on