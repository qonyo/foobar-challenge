This txt is made for considering any fail case and handling it as fitting as possible to problem domain

ABCABCABCABC : Normal 1, Pattern ABC
ABCCBAABCCBA : Normal 2, Pattern ABCCBA shows that longest pattern win (CBA / ABC ignored)
AAAAAAAAAAAA : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA, count as 1

"", A, AB, ABA (less than 4) : 
- With empty cake I think it's fair to say only one way to cut it fairly, you can'than
  this philosophy of 1 way of cutting is shared with combinatorial 0! = 1

- A (1 Char) : 1 way to cut it, straight into stomach
- AA : 1 / 2? one can say that A is a pattern thus can be cut into 2
- AB/ABC : 1 no pattern means no cutting hence, let them eat cake
- AAB : from readme there is "sequence" after searching for the term, it means 
				"a particular order in which related events, movements, or things follow each other."
				notice the plural, I guess if there is only one char A as sequence it's not really sequence
				
- Conclusion : char under 4 will be regarded as 1 way to cut it


ABCABCZ : That one troublemaker, Pattern = ABC, slicing = 2 fair slice is ABC, throw away Z 
					nobody likes him, he smells >:(
					
ZABCABC : Backstabbo, what if orders started late? needs a way to deal with it such as changing starting
					pattern check

BCABCABCA : Backstabbo + Overflow, Pattern AB, need circular linkedlist to deal with it, total 3
CABCZAB : Overflow + Backstabbo another, see Backstabbo+Overflow, total 2

Some insights:
1. Pattern can't be smaller than 1
2. pattern can't be bigger than length half of string
3. Overflow cases will be dealt on low priority because of how complex is it and the possibility of 
	 fix solution will be kind of resource intensive
4. There is a problem with ABCABCABCABC and ABCCBAABCCBA at first I thought the longer pattern have higher priority
5. From point 4, smaller pattern wins
6. After some thought a pattern should be longer than 1
7. Example of point 7 ABACA, if pattern is 1 then there would be A : 3 which doesn't really make sense


I think I went into this problem on the wrong foot 
let's leave some edge cases alone such as baby dict and homogenous 
and focus on breaking down the problem and how to finish this problem

solution: (considering we will save the overflow case for later)
1. find the repeating characters
2. count the repeating characters

Example:

ABCABCABCABC : ABC is repeating character (instead of ABCABC)
output : 4

in case of overflow:
1. find the repeating characters
2. find the index of the first repeating character (noted as i)
3. append [0:i] to the end of string
4. count the repeating characters

Example :
CABCABCABCAB : ABC is repeating character found in index 1
CABCABCABCABC : C (index 0) is appended to the end of string
output : 4

general:
pattern_found by default is 1

Step 1 breakdown:
1. starts from 2 pattern length to half_length_string
2. take subtstrings from 0 to string_length - pattern_length
3. see if any pattern match
4. if match return pattern and index
5. if not match return ("", -1)

step 2:
1. if nothing match return 1
2. if something match start checking pattern from match_index + pattern length
3. iterate +1
4. if found new, add pattern_found += 1 add index by pattern_length
5. continue till end of string