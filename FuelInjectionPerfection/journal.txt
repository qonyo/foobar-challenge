This problem reminds me of 3n+1 problem see here : https://en.wikipedia.org/wiki/Collatz_conjecture

I believe the key to this problem is as follows:
1. look for the fastest way to the smallest 2^n number
2. because of 309 digits rule we need a fast computation method

Some observation :
the bigger we goes into the nitty gritty of hard number crunching I think it's good to write some observation
1. the higher we go the less 2^n number there is
2. I think that finding the fastest way to 2^n is key because each step will result in x/2 closer to 1
3. which means we might need to check modulo/ is it even or not
4. there might also be pattern of some special odd number having to be +1 or -1 (transform into even) which will result in the fastest way to 1
5. Why I think there is pattern? it's a competitive programming stuff, you are always expected to fine some interesting things here

I also think we might be able to use some dynamic programmin in this problem

let's try working with some test cases I think I will write some samples with paper to make it easier to jiggle some number around
so see you later.

after working for 10 samples I found out that the best way for an even number is to divide by 2 right away:

2 : 2, 1 		|| :2
3 : 3, 2, 1 || -1 
4 : 4, 2 , 1 ||:2
5 : 5, 4, 2, 1 || -1
6 : 6, 3, 2, 1 || :2
7 : 7, 8, 4, 2, 1 || 7, 6, 3, 2, 1 <= this case is flexible, that's why I wrote both so that I can find pattern faster || +- 1
8 : 8, 4, 2, 1 || :2
9 : 9, 8, 4, 2, 1 || :2
10 : 5,4,2,1 || :2
1 : 1

thus far I can't find a case where +1 at first step is advantageous instead of 7, say let's try it out to bigger number and 15 from readme

Expanded :
2 : 2, 1 		|| :2
3 : 3, 2, 1 || -1 
4 : 4, 2 , 1 ||:2
5 : 5, 4, 2, 1 || -1
6 : 6, 3, 2, 1 || :2
7 : 7, 8, 4, 2, 1 || 7, 6, 3, 2, 1 <= this case is flexible, that's why I wrote both so that I can find pattern faster || +- 1
8 : 8, 4, 2, 1 || :2
9 : 9, 8, 4, 2, 1 || -1
10 : 10,5,4,2,1 || :2
11 : 11, 12, 6, 3, 2, 1 || 11, 10, 5, 4, 2, 1 || +- 1
12 : 12, 6, 3, 2, 1 || :2
13 : 13, 12, 6, 3, 2, 1 || -1
14 : 14, 7, 6, 3, 2, 1 || :2
15 : 15, 16, 8, 4, 2, 1 || 15, 14, 7, 6, 3, 2, 1 + 1 < must +, pattern break
16 : 16, 8, 4, 2, 1 || :2
17 : 17, 16, 8, 4, 2, 1 || 17, 18, 9, 8, 4, 2, 1 || -1
18 : 18, 9, 8, 4, 2, 1 || :2
19 : 19, 18, 9, 8, 4, 2, 1 || 20, 10, 5, 4, 2, 1 || +- 1
20 : 20, 10, 5, 4, 2, 1 || :2

is every 5*3 multiplier always result in +1 first? since 5 or 3 multiplier unique doesn't have this problem
one thing for almost sure even is always divided by 2

==============================================================================================================================
takes all odds for faster manual computation and higher range
3 : 3, 2, 1 || -1 
5 : 5, 4, 2, 1 || -1
7 : 7, 8, 4, 2, 1 || 7, 6, 3, 2, 1 || +- 1
9 : 9, 8, 4, 2, 1 || -1
11 : 11, 12, 6, 3, 2, 1 || 11, 10, 5, 4, 2, 1 || +- 1
13 : 13, 12, 6, 3, 2, 1 || -1
15 : 15, 16, 8, 4, 2, 1 || 15, 14, 7, 6, 3, 2, 1 || + 1
17 : 17, 16, 8, 4, 2, 1 || 17, 18, 9, 8, 4, 2, 1 || -1
19 : 19, 18, 9, 8, 4, 2, 1 || 19, 20, 10, 5, 4, 2, 1 || -+ 1
21 : 21, 20, 10, 5, 4, 2, 1|| -1
23 : 23, 24, 12, 6, 3, 2, 1 || 23, 22, 11, 10, 5, 4, 2, 1  || +1
25 : 25, 24, 12, 6, 4, 2,1 || -1
27 : 26, 13, 12 ,6, 3, 2, 1 || -1
29 : 29, 30, 15, 16, 8, 4, 2, 1 || 29, 28, 14, 7, 6, 3, 2, 1 || +-1
31 : 31, 30, 15, 16, 8, 4, 2, 1 || 32, 16, 8, 4, 2, 1 || +1
33 : 32,16,8,4,2,1 || -1
35 : 35, 36, 23, 24, 12, 6, 3, 2, 1 || 35, 34, 17, 16, 8 ,4, 2, 1 || -1
37 : 37, 38, 19, 20, 10 ,5,4, 2, 1 || 37, 36, 23, 24, 12, 6, 3, 2 ,1 || +-1
39 : 39, 40, 20, 10, 5, 4, 2, 1 || 39, 38, 19, 18, 9, 8, 4, 2, 1  || +1
41 : 41, 40, 20, 10, 5, 4, 2, 1 || -1
43 : 43, 44, 22, 11, 10, 5, 4, 2, 1 || 43, 42, 21, 20, 10, 5, 4 ,2 ,1 || +-1
45 : 45, 44, 22, 11, 10, 5, 4, 2, 1 || 46, 28, 14, 7, 8, 4, 2, 1 || +-1
47 : 47, 48, 24, 12, 6, 3, 2, 1 || 47, 46 , 23, 22, 11, 10, 5, 4, 2, 1 || +1
49 : 49, 50, 25, 24, 12, 6, 4, 2, 1 || 49, 48, 24, 12, 6, 3, 2, 1 || -1

must +:
15, 23 ,31, 39, 47
diff 8, 8, 8, 8, < we found a little bit of pattern here (although 7 is also technically can be + 1)

7%8 = 7
15%8 = 7

if n % 8 == 7 += 1?
n%8 might be an expensive operator though, but I think I can try to implement it later
must + or might use +:
7 11 15 19 21 23 29 31 37 39 43 45 47
 4  4  4  2  2  6  2  6  2  4  2  2
 
current pseudocode:
def solution(num):
	if num==1:
		return num
	elif num % 2 == 0:
		return 1+solution(num/2)
	elif num%8 == 7:
		return 1+solution(num+1)
	else:
		return 1+solution(num-1)
		
current test cases :
foobar:~/fuel-injection-perfection faizqornijo$ verify solution.py 
Verifying solution...
Test 1 passed!
Test 2 passed!
Test 3 failed  [Hidden]
Test 4 failed  [Hidden]
Test 5 failed  [Hidden]
Test 6 failed  [Hidden]
Test 7 failed  [Hidden]
Test 8 failed  [Hidden]
Test 9 passed! [Hidden]
Test 10 failed  [Hidden]

it might have to do with variable typing and performance issue this solution should works in all cases, but I think I need to dig deeper into optimizing arithmetic function
because this program require big number (300++ digits) to be able to be processed in an acceptable timeframe

https://stackoverflow.com/questions/538551/handling-very-large-numbers-in-python

use bignum

or maybe float

https://stackoverflow.com/questions/1835787/what-is-the-range-of-values-a-float-can-have-in-python/1839009

but I don't think float computation will result in int, let's try it out first

https://stackoverflow.com/questions/20393373/performance-wise-how-fast-are-bitwise-operators-vs-normal-modulus

it's possible to use bitwise operation for better performance, but I think the conversion and some logic might change if we implement bitwise (binary) operation fully, let's create a branch for this